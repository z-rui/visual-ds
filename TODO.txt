# Architectural Improvement Ideas

This file lists potential areas for future refactoring and improvement based on an initial architectural review.

## 1. Animation Timing Mechanism

- **Issue:** The current timing mechanism relies on a fixed `ANIMATION_SPEED` constant in a `setTimeout` chain. This can be fragile, as the actual animation time from `react-spring` might vary depending on the complexity of the animation (e.g., distance of a moving node).
- **Suggested Refactoring:** Replace the `setTimeout`-based waiting with the `onRest` callback from `react-spring`. The `onRest` callback fires when a spring animation has come to a complete stop. Using this to trigger the next step in the animation sequence would create a more robust and perfectly synchronized system.

## 2. Scalability for New Data Structures

- **Issue:** The current set of atomic commands in `IDataStructureAdapter.ts` is well-suited for Binary Search Trees but might be too specific for other data structures like Graphs or Heaps.
- **Suggestion:** Before adding a new data structure, review and potentially extend the set of atomic commands. For example, a Graph might require `HIGHLIGHT_EDGE` or `TRAVERSE_EDGE` commands. The goal is to keep the commands atomic and the Engine generic.

## 3. Centralized State Management

- **Issue:** Application state is currently managed within React components. As the application grows (e.g., adding more UI controls, multiple visualizers), this can become difficult to maintain.
- **Suggestion:** For future growth, consider adopting a lightweight state management library (e.g., Zustand, Jotai) or React's built-in Context API. This would help manage global state (like animation speed, current data structure, etc.) in a more predictable and scalable way.